# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.transcript_management.grpc import transcript_management_pb2 as api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class FileManagementControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/worker_backend.transcript_management.FileManagementController/Create',
                request_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementRequest.SerializeToString,
                response_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementResponse.FromString,
                )


class FileManagementControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileManagementControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementRequest.FromString,
                    response_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_backend.transcript_management.FileManagementController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileManagementController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_backend.transcript_management.FileManagementController/Create',
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementRequest.SerializeToString,
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FileManagementListControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/worker_backend.transcript_management.FileManagementListController/List',
                request_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementListRequest.SerializeToString,
                response_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementListResponse.FromString,
                )


class FileManagementListControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileManagementListControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementListRequest.FromString,
                    response_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_backend.transcript_management.FileManagementListController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileManagementListController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_backend.transcript_management.FileManagementListController/List',
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementListRequest.SerializeToString,
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.FileManagementListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HealthCheckControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.healthCheck = channel.unary_unary(
                '/worker_backend.transcript_management.HealthCheckController/healthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.HealthCheckhealthCheckResponse.FromString,
                )


class HealthCheckControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def healthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthCheckControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'healthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.healthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.HealthCheckhealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_backend.transcript_management.HealthCheckController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HealthCheckController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def healthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_backend.transcript_management.HealthCheckController/healthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.HealthCheckhealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TranscriptionLogListControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/worker_backend.transcript_management.TranscriptionLogListController/List',
                request_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.TranscriptionLogListRequest.SerializeToString,
                response_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.TranscriptionLogListResponse.FromString,
                )


class TranscriptionLogListControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranscriptionLogListControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.TranscriptionLogListRequest.FromString,
                    response_serializer=api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.TranscriptionLogListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_backend.transcript_management.TranscriptionLogListController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TranscriptionLogListController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_backend.transcript_management.TranscriptionLogListController/List',
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.TranscriptionLogListRequest.SerializeToString,
            api_dot_transcript__management_dot_grpc_dot_transcript__management__pb2.TranscriptionLogListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
