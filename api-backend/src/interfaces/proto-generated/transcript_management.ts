// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.3
// source: transcript_management.proto

/* eslint-disable */
import { Observable } from "rxjs";
import { type Empty } from "./google/protobuf/empty";

export const protobufPackage = "worker_backend.transcript_management";

export interface FileManagementListRequest {
}

export interface FileManagementListResponse {
  results: FileManagementResponse[];
  count: number;
}

export interface FileManagementRequest {
  id?: string | undefined;
  raw_file_key: string;
  meeting_title?: string | undefined;
  created_by_user_id?: string | undefined;
}

export interface FileManagementResponse {
  id?: string | undefined;
  raw_file_key: string;
  audio_file_key?: string | undefined;
  meeting_title?: string | undefined;
  meeting_meeting_start_time?: string | undefined;
  meeting_meeting_end_time?: string | undefined;
  execution_id?: string | undefined;
  bot_used?: number | undefined;
  status?: number | undefined;
  created_by_user_id?: string | undefined;
}

export interface HealthCheckhealthCheckResponse {
  ServingStatus: string;
}

export interface TranscriptionLogListRequest {
}

export interface TranscriptionLogListResponse {
  results: TranscriptionLogResponse[];
  count: number;
}

export interface TranscriptionLogResponse {
  id?: string | undefined;
  speaker?: string | undefined;
  transcription_start_time_milliseconds?: string | undefined;
  transcription_end_time_milliseconds?: string | undefined;
  transcription_Data?: string | undefined;
}

export interface FileManagementController {
  Create(request: FileManagementRequest): Observable<FileManagementResponse>;
}

export interface FileManagementListController {
  List(request: FileManagementListRequest): Observable<FileManagementListResponse>;
}

export interface HealthCheckController {
  healthCheck(request: Empty): Observable<HealthCheckhealthCheckResponse>;
}

export interface TranscriptionLogListController {
  List(request: TranscriptionLogListRequest): Observable<TranscriptionLogListResponse>;
}
